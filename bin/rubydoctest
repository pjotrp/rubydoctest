#!/usr/bin/env ruby

options, files = ARGV.partition{ |a| a =~ /^-/ }

runpath=File.dirname(File.dirname(__FILE__))
$: << runpath+'/lib'

if ARGV.empty? or options.include?("-h") or options.include?("--help")
  require 'rubydoctest/version'
  puts <<-DIRECTIONS
Ruby DocTest #{Rubydoctest::VERSION::STRING}
USAGE: rubydoctest [options] <files>
  
  rubydoctest parses Ruby files (.rb) or DocTest files (.doctest) for irb-style
  sessions in comments, and runs the commented sessions as tests.
  
  Options:
    General:
      --help   - show this usage / help information
      --single - run all tests in the same ruby environment
      -r<file> - filename to require (use one -r switch per file)
      -t<n>    - only run test number n, e.g. -t1 -t3
    
    Output Format:
      --html  - output in HTML format
      --plain - force output in plain text (no Ansi colors)
    
    Debug:
      --ignore-interactive - do not heed !!! special directives
      --trace     - turn backtrace on to debug Ruby DocTest
      --debugger  - include ruby-debug library / gem
  
  See http://github.com/tablatom/rubydoctest/wikis for more information.
  DIRECTIONS
  exit 0
end

single = options.include?("--single")

requires = ['rubygems', File.dirname(__FILE__) + "/../lib/rubydoctest"]
requires << 'ruby-debug' if options.include?("--debugger")
requires.concat options.select{|o|o=~/^-r/}.map{|o|o.gsub(/^-r\s*/,"")}

ruby_lines = []
ruby_lines << "RubyDocTest.trace = true;" if options.include?("--trace")
ruby_lines << "RubyDocTest.ignore_interactive = true;" if options.include?("--ignore-interactive")

tests = options.map{ |o| o =~ /^-t(\d+)/; $1 }.compact
ruby_lines << "RubyDocTest.tests = #{tests.inspect};" if tests.size > 0

requires = requires.map {|lib| "require '#{lib}'; "}.join

def files_runner(command, files, requires, lines, single=false)
  if single
    script = %(#{command} -e "#{requires} #{lines.join(" ")} )
    files.reverse_each do |f|
      script << %(RubyDocTest::Runner.new(File.read('#{f}'), '#{f}').run; )
    end
    script << %(nil")
    system script
  else
    files.reverse_each do |f|
      system %(#{command} -e "#{requires} #{lines.join(" ")} RubyDocTest::Runner.new(File.read('#{f}'), '#{f}').run")
    end
  end
end

if options.include?("--plain")
  ruby_lines << "RubyDocTest.output_format = :plain;" 
  files_runner("ruby", files, requires, ruby_lines, single)
elsif options.include?("--html")
  ruby_lines << "RubyDocTest.output_format = :html;" 
  puts "<html><body><pre>"
  files_runner("ruby", files, requires, ruby_lines, single)
  puts "</pre></body></html>"
else
  files_runner("ruby", files, requires, ruby_lines, single)
end
